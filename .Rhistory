#Last column of both training and testing may now be removed
training <- training[,-ncol(training)]
testing <- testing[,-ncol(testing)]
#Subsequent factoring operations require same factor levels between training and testing sets, so we will first bind the two data sets together
data <- rbind(training,testing)
#The columns X, user_name, and cvtd_timestamp are not useful for prediction
data <- data[ , -which(names(data) %in% c("X", "user_name", "cvtd_timestamp"))]
#Change columns to class numeric, then make some columns factors again
for (i in 1:length(data)) {
data[,i] <- as.numeric(data[,i])
}
x <- which(names(data) %in% c("new_window", "kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt", "skewness_yaw_dumbbell", "amplitude_yaw_dumbbell", "kurtosis_yaw_forearm", "skewness_yaw_forearm", "amplitude_yaw_forearm", "classe"))
for (i in 1:length(x)) {
data[, x[i]] <- as.factor(data[,x[i]])
}
#Split the data into training and testing sets again
training <- data[c(1:19622),]
testing <- data[c(19623:19642),]
str(training)
str(testing)
training <- read.csv("C:/Users/rzhang124/Documents/training.csv", header = T)
testing <- read.csv("C:/Users/rzhang124/Documents/testing.csv", header = T)
naCols <- which(colSums(is.na(testing))!=0)
training <- training[,-naCols]
testing <- testing[,-naCols]
classe <- training$classe
#Last column of both training and testing may now be removed
training <- training[,-ncol(training)]
testing <- testing[,-ncol(testing)]
#Subsequent factoring operations require same factor levels between training and testing sets, so we will first bind the two data sets together
data <- rbind(training,testing)
data <- data[ , -which(names(data) %in% c("X", "user_name", "cvtd_timestamp"))]
for (i in 1:length(data)) {
data[,i] <- as.numeric(data[,i])
}
x <- which(names(data) %in% c("new_window", "kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt", "skewness_yaw_dumbbell", "amplitude_yaw_dumbbell", "kurtosis_yaw_forearm", "skewness_yaw_forearm", "amplitude_yaw_forearm", "classe"))
for (i in 1:length(x)) {
data[, x[i]] <- as.factor(data[,x[i]])
}
str(data)
training <- data[c(1:19622),]
testing <- data[c(19623:19642),]
dim(training)
dim(testing)
model <- randomForest(classe ~ ., data = training)
model
library("e1071", lib.loc="~/R/win-library/3.1")
library("randomForest", lib.loc="~/R/win-library/3.1")
model <- randomForest(classe ~ ., data = training)
training <- cbind(training, classe)
names(training) %in% names(testing)
str(training)
model <- randomForest(classe ~ ., data = training)
set.seed(100)
model <- randomForest(classe ~ ., data = training)
model
names(testing)
---
title: "MachineLearningProject"
author: "Rachel Zhang"
date: "Saturday, December 20, 2014"
output: html_document
---
Load libraries
```{r}
library(caret)
library(e1071)
library(randomForest)
set.seed(100)
```
Load data
```{r cache = TRUE}
training <- read.csv("C:/Users/rzhang124/Documents/training.csv", header = T)
testing <- read.csv("C:/Users/rzhang124/Documents/testing.csv", header = T)
```
Preprocess data
```{r}
#Separate out the classe variable of the training set
classe <- training$classe
#Last column of both training and testing may now be removed
training <- training[,-ncol(training)]
testing <- testing[,-ncol(testing)]
#Subsequent factoring operations require same factor levels between training and testing sets, so we will first bind the two data sets together
data <- rbind(training,testing)
#Remove columns that contain NAs to reduce the number of predictors we consider in the model
#naCols <- which(colSums(is.na(training))!=0)
naCols <- which(colSums(is.na(data))!=0)
data <- data[,-naCols]
#The columns X, user_name, and cvtd_timestamp are not useful for prediction
data <- data[ , -which(names(data) %in% c("X", "user_name", "cvtd_timestamp"))]
#Change columns to class numeric, then make some columns factors again
for (i in 1:length(data)) {
data[,i] <- as.numeric(data[,i])
}
x <- which(names(data) %in% c("new_window", "kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt", "skewness_yaw_dumbbell", "amplitude_yaw_dumbbell", "kurtosis_yaw_forearm", "skewness_yaw_forearm", "amplitude_yaw_forearm", "classe"))
for (i in 1:length(x)) {
data[, x[i]] <- as.factor(data[,x[i]])
}
#Split the data into training and testing sets again
training <- data[c(1:19622),]
testing <- data[c(19623:19642),]
training <- cbind(training, classe)
```
Build random forest model
```{r}
model <- randomForest(classe ~ ., data = training)
library(caret)
library(e1071)
library(randomForest)
set.seed(100)
training <- read.csv("C:/Users/rzhang124/Documents/training.csv", header = T)
testing <- read.csv("C:/Users/rzhang124/Documents/testing.csv", header = T)
#Separate out the classe variable of the training set
classe <- training$classe
#Last column of both training and testing may now be removed
training <- training[,-ncol(training)]
testing <- testing[,-ncol(testing)]
#Subsequent factoring operations require same factor levels between training and testing sets, so we will first bind the two data sets together
data <- rbind(training,testing)
#Remove columns that contain NAs to reduce the number of predictors we consider in the model
#naCols <- which(colSums(is.na(training))!=0)
naCols <- which(colSums(is.na(data))!=0)
data <- data[,-naCols]
#The columns X, user_name, and cvtd_timestamp are not useful for prediction
data <- data[ , -which(names(data) %in% c("X", "user_name", "cvtd_timestamp"))]
#Change columns to class numeric, then make some columns factors again
for (i in 1:length(data)) {
data[,i] <- as.numeric(data[,i])
}
x <- which(names(data) %in% c("new_window", "kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt", "skewness_yaw_dumbbell", "amplitude_yaw_dumbbell", "kurtosis_yaw_forearm", "skewness_yaw_forearm", "amplitude_yaw_forearm", "classe"))
for (i in 1:length(x)) {
data[, x[i]] <- as.factor(data[,x[i]])
}
#Split the data into training and testing sets again
training <- data[c(1:19622),]
testing <- data[c(19623:19642),]
training <- cbind(training, classe)
```
Build random forest model
```{r}
model <- randomForest(classe ~ ., data = training)
model
predictions <- predict(model, testing)
predictions
str(predictions)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("C:/Users/rzhang124/Desktop/Coursera/Machine Learning")
pml_write_files(predictions)
predictions[10]
#Separate out the classe variable of the training set
classe <- training$classe
#Last column of both training and testing may now be removed
training <- training[,-ncol(training)]
testing <- testing[,-ncol(testing)]
#Subsequent factoring operations require same factor levels between training and testing sets, so we will first bind the two data sets together
data <- rbind(training,testing)
#Remove columns that contain NAs to reduce the number of predictors we consider in the model
naCols <- which(colSums(is.na(data))>0.5*nrow(data))
data <- data[,-naCols]
#The columns X, user_name, and cvtd_timestamp are not useful for prediction
data <- data[ , -which(names(data) %in% c("X", "user_name", "cvtd_timestamp"))]
#Change columns to class numeric, then make some columns factors again
for (i in 1:length(data)) {
data[,i] <- as.numeric(data[,i])
}
x <- which(names(data) %in% c("new_window", "kurtosis_yaw_belt", "skewness_yaw_belt", "amplitude_yaw_belt", "skewness_yaw_dumbbell", "amplitude_yaw_dumbbell", "kurtosis_yaw_forearm", "skewness_yaw_forearm", "amplitude_yaw_forearm", "classe"))
for (i in 1:length(x)) {
data[, x[i]] <- as.factor(data[,x[i]])
}
#Split the data into training and testing sets again
training <- data[c(1:19622),]
testing <- data[c(19623:19642),]
training <- cbind(training, classe)
```
Build random forest model
```{r}
model <- randomForest(classe ~ ., data = training)
model
predictions <- predict(model, testing)
setwd("~/")
data <- read.table("BD_test.xlsx", header = T)
data <- read.csv("BD_test.csv", header = T)
head(data)
names(data)
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[,-which(colSums(temp))=0]
new <- rbind(new, temp)
}
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[,-which(colSums(temp))==0]
new <- rbind(new, temp)
}
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[,-which(colSums(is.na(temp)))==0]
new <- rbind(new, temp)
}
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[,-(which(colSums(is.na(temp)))==0)]
new <- rbind(new, temp)
}
for (i in 1:1135) {
temp <- data[i,]
#temp <- temp[,-(which(colSums(is.na(temp)))==0)]
naCols <- which(colSums(is.na(temp))!=0)
temp <- temp[,-naCols]
new <- rbind(new, temp)
}
temp <- data[1,]
temp
aCols <- which(colSums(is.na(temp))!=0)
naCols <- which(colSums(is.na(temp))!=0)
naCols
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[,colSums(is.na(temp))>0]
new <- rbind(new, temp)
}
temp
temp <- data[i,]
temp
i
temp <- data[1,]
temp <- temp[,colSums(is.na(temp))>0]
temp
temp <- temp[,colSums(is.na(temp))>0]
View(temp)
temp <- data[1,]
View(temp)
data[data == ""] <- NA
View(data)
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[,colSums(is.na(temp))>0]
new <- rbind(new, temp)
}
View(new)
data <- read.csv("BD_test.csv", header = T)
View(data)
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[,temp!=""]
new <- rbind(new, temp)
}
warnings()
View(new)
bad <- which(temp == "")
bad
temp <- data[1,]
bad <- which(temp == "")
bad
for (i in 1:1135) {
temp <- data[i,]
bad <- which(temp == "")
temp <- temp[,-bad]
new <- rbind(new, temp)
}
View(new)
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
bad <- which(temp == "")
temp <- temp[,-bad]
new <- rbind(new, temp)
}
View(new)
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSum(temp != "") !=0]
new <- rbind(new, temp)
}
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
new <- rbind(new, temp)
}
View(new)
temp <- data[1,]
temp <- temp[ ,colSums(temp != "") !=0]
temp
temp <- as.character(temp)
temp
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
temp <- as.character(temp)
new <- rbind(new, temp)
}
View(new)
warnings()
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- as.character(temp)
temp <- temp[ ,colSums(temp != "") !=0]
new <- rbind(new, temp)
}
temp <- as.character(data)
temp
str(data)
View(data)
temp <- data[2,]
temp
View(temp)
temp <- temp[ ,colSums(temp != "") !=0]
temp <- as.character(temp)
new <- rbind(new, as.data.frame(temp))
View(new)
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
temp <- as.character(temp)
new <- rbind(new, as.data.frame(temp))
}
View(new)
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
temp <- as.character(temp)
new <- rbind(new, as.data.frame(temp))
}
View(new)
write.csv(new, file = "clean.csv")
data <- read.csv("BD_test.csv", header = T)
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
temp <- as.character(temp)
new <- rbind(new, as.data.frame(temp))
}
View(new)
new <- data.frame()
temp <- data[1,]
View(temp)
temp <- temp[ ,colSums(temp != "") !=0]
View(temp)
temp <- as.character(temp)
temp <- data[1,]
temp <- temp[ ,colSums(temp != "") !=0]
str(temp)
temp[,1] <- as.character(temp[,1])
temp[,2] <- as.character(temp[,2])
View(temp)
new <- rbind(new, as.data.frame(temp))
View(new)
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
temp[,1] <- as.character(temp[,1])
temp[,2] <- as.character(temp[,2])
new <- rbind(new, as.data.frame(temp))
}
names(temp)
names(new)
new <- data.frame()
names(new)
new <- data.frame()
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
temp[,1] <- as.character(temp[,1])
temp[,2] <- as.character(temp[,2])
names(temp) <- c("1", "2")
new <- rbind(new, as.data.frame(temp))
}
for (i in 1:1135) {
temp <- data[i,]
temp <- temp[ ,colSums(temp != "") !=0]
temp[,1] <- as.character(temp[,1])
temp[,2] <- as.character(temp[,2])
names(temp) <- c("1", "2")
new <- rbind(new, as.data.frame(temp))
}
View(new)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
mod1 <- train(as.factor(y) ~ ., method = "rf", data = vowel.train)
install.packages(caret)
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("caret")
library(caret)
mod1 <- train(as.factor(y) ~ ., method = "rf", data = vowel.train)
mod2 <- train(as.factor(y) ~ ., method = "gbm", data = vowel.train)
mod1
mod1$finalModel
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
set.seed(33833)
mod1 <- train(as.factor(y) ~ ., method = "rf", data = vowel.train)
mod2 <- train(as.factor(y) ~ ., method = "gbm", data = vowel.train)
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
x <- intersect(pred1, pred2)
head(x)
y <- pred1[x,]
y <- pred1[x]
head(y)
y
tail(y)
x
DF <- data.frame(pred1, pred2, vowel.test$y)
x <- which(DF[,1] == DF[,2])
dim(DF)
dim(x)
length(x)
pred3 <- DF[x, 1]
dim(pred3)
length(pred3)
pred3
pred3 <- DF[x,]
head(pred3)
confusionMatrix(pred3[,1], pred3[,3])
polyroot(3x^7 +11x^6 -51x^5 -494x^4 - 475x^3 +333x^2 +523x + 150)
?polyroot
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(2,2,3,4,5,6,7,8,9,10)
confusionMatrix(x,y)
library("caret", lib.loc="~/R/win-library/3.1")
confusionMatrix(x,y)
x <- as.integer(x)
y <- as.integer(y)
confusionMatrix(x,y)
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(2,1,3,4,5,6,7,8,9,10)
confusionMatrix(x,y)
confusionMatrix(y,x)
?sample
install.packages("shiny")
library("shiny", lib.loc="~/R/win-library/3.1")
?manipulate
library("manipulate", lib.loc="~/R/win-library/3.1")
?manipulate
?cars
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot(1)
myPlot(10)
?abline
?manipulate
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
?abline
?manipulate
require(rCharts)
install.packages("rCharts")
require(rCharts)
library(rCharts)
install.packages("devtools")
library(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
install_github('ramnathv/rCharts')
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='rzhang', token='6F6BEA95B13CE393FDA5DA92D469F893', secret='EyS7NMARBICDtkG8CE/bamWxAPQJumwvAG45EKUk')
?runif
runif(56,2,5)
x <- runif(56,2,5)
x
write.xlsx(x, "numbers.xlsx")
write.table(x, "numbers.xlsx")
library(xlsx)
write.xlsx(x, "numbers.xlsx")
library(shiny)
setwd("~/Shiny Project")
runapp()
runApp()
runApp()
runApp()
runApp()
runApp()
?abs
runApp()
difference <- function(innerAge, trueAge) {
abs(innerAge - trueAge)
}
difference(10,20)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
